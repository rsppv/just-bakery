//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JustBakery.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BakeryEntitiesHome : DbContext
    {
        public BakeryEntitiesHome()
            : base("name=BakeryEntitiesHome")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Stock> Stocks { get; set; }
        public virtual DbSet<Person> Persons { get; set; }
        public virtual DbSet<Bakery> Bakeries { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Recipe> Recipes { get; set; }
        public virtual DbSet<Ingridient> Ingridients { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Raw> Raw { get; set; }
        public virtual DbSet<Position> Positions { get; set; }
        public virtual DbSet<OperationType> OperationTypes { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<RawType> RawTypes { get; set; }
        public virtual DbSet<ProductAccountingLog> ProductAccountingLog { get; set; }
        public virtual DbSet<RawAccountingLog> RawAccountingLogs { get; set; }
        public virtual DbSet<ProductResidue> ProductResidues { get; set; }
        public virtual DbSet<RawResidue> RawResidues { get; set; }
        public virtual DbSet<DetailProductOperation> DetailsProductOperation { get; set; }
        public virtual DbSet<DetailRawOperation> DetailsRawOperation { get; set; }
    
        public virtual ObjectResult<Vacancies> VacancyListByPosition(Nullable<System.Guid> iD_Должности)
        {
            var iD_ДолжностиParameter = iD_Должности.HasValue ?
                new ObjectParameter("ID_Должности", iD_Должности) :
                new ObjectParameter("ID_Должности", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vacancies>("VacancyListByPosition", iD_ДолжностиParameter);
        }
    }
}
